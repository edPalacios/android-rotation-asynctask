Index: app/src/main/java/com/example/palacios/eduardo/android/assigment3_rotation/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/palacios/eduardo/android/assigment3_rotation/MainActivity.java	(revision )
+++ app/src/main/java/com/example/palacios/eduardo/android/assigment3_rotation/MainActivity.java	(revision )
@@ -24,158 +24,156 @@
 
 
 public class MainActivity extends Activity {
-
-    private static final String TAG = "MainActivity";
-    private boolean isDownload = false;
-    private boolean isFilter = false;
-    private EditText userInput;
-    private ImageView imageView;
-    private Button downloadButton;
-    private Button filterButton;
-    private ProgressBar progressBar;
-    private DownloadImageFragment downloadImageFragment;
-    private Uri mDefaultUrl =
-        Uri.parse("http://www.dre.vanderbilt.edu/~schmidt/robot.png");
-    Uri urlUser;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_main);
-
-        userInput = (EditText) findViewById(R.id.user_input_url);
-        imageView = (ImageView) findViewById(R.id.image_view);
-        downloadButton = (Button) findViewById(R.id.download_image);
-        filterButton = (Button) findViewById(R.id.filter_image);
-        progressBar = (ProgressBar) findViewById(R.id.progress_bar);
-
-
-        if (savedInstanceState == null) {
-                         downloadImageFragment = new DownloadImageFragment();
-            getFragmentManager().beginTransaction()
-                    .add(downloadImageFragment, "downloadImageFragmen").commit();
-
-        } else {
-            downloadImageFragment =  (DownloadImageFragment) getFragmentManager()
-                    .findFragmentByTag("downloadImageFragment");
-        }
+ 
+     private static final String TAG = "MainActivity";
+     private boolean isDownload = false;
+     private boolean isFilter = false;
+     private EditText userInput;
+     private ImageView imageView;
+     private Button downloadButton;
+     private Button filterButton;
+     private ProgressBar progressBar;
+     private DownloadImageFragment downloadImageFragment;
+     private Uri mDefaultUrl =
+         Uri.parse("http://www.dre.vanderbilt.edu/~schmidt/robot.png");
+     Uri urlUser;
+ 
+     @Override
+     protected void onCreate(Bundle savedInstanceState) {
+         super.onCreate(savedInstanceState);
+         setContentView(R.layout.activity_main);
+ 
+         userInput = (EditText) findViewById(R.id.user_input_url);
+         imageView = (ImageView) findViewById(R.id.image_view);
+         downloadButton = (Button) findViewById(R.id.download_image);
+         filterButton = (Button) findViewById(R.id.filter_image);
+         progressBar = (ProgressBar) findViewById(R.id.progress_bar);
+ 
+ 
+         if (savedInstanceState == null) {
+                          downloadImageFragment = new DownloadImageFragment();
+             getFragmentManager().beginTransaction()
+                     .add(downloadImageFragment, "downloadImageFragmen").commit();
+ 
+         } else {
+             downloadImageFragment =  (DownloadImageFragment) getFragmentManager()
+                     .findFragmentByTag("downloadImageFragment");
+         }
-        if (downloadImageFragment != null) {
-            if (
-                    (downloadImageFragment.downloadImageAsyncTask != null
-                    || downloadImageFragment.filterImageAsyncTask != null)
+         if (downloadImage            if (
+                     (downloadImageF AsyncTask != null
+                                                          eFragment.filterImageAsyncTask != null)
-                    && (downloadImageFragment.downloadImageAsyncTask.getStatus()
+                     && (downloadImageFragment.downloadImageAsyncTask.getStatus()
-                            == AsyncTask.Status.RUNNING || downloadImageFragment.filterImageAsyncTask.getStatus()
+                                                  == AsyncTask.Status.RUNNING || downloadImageFragmencTask.getStatus()
-                    == AsyncTask.Status.RUNNING )
-                ) {
+                                                                                                                          == AsyncTask.Status.RUNNING )
+                 ) {
-                progressBar.setVisibility(View.VISIBLE);
-            }
+                                                          }
-        }
-
+ 
-    }
+     } //|| downloadImageFragment.filterImageAsyncTask != null)
-
-    public void downloadImage(View view) {
-        try {
-            hideKeyboard(this,
-                    userInput.getWindowToken());
-            isDownload = true;
-           Uri  urlUser = getUrl();
-            downloadImageFragment.startBackgroundTask(urlUser);
-
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
-    public void scaleToGrayImage(View view) {
-        try {
-            hideKeyboard(this,
-                    userInput.getWindowToken());
-            isFilter = true;
-           Uri  urlUser = getUrl();
-            downloadImageFragment.startFilterBackgroundTask(urlUser);
-
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
-
-    /**
-     * Get the URL to download based on user input.
-     */
-    protected Uri getUrl() {
-        Uri url = Uri.parse(userInput.getText().toString());
-        String uri = url.toString();
-        if (uri == null || uri.equals(""))
-            url = mDefaultUrl;
-        if (URLUtil.isValidUrl(uri) || uri.isEmpty()) {
-            return url;
-        } else {
-            Toast.makeText(this,
-                    "Invalid URL ",
-                    Toast.LENGTH_SHORT).show();
-            return url;
-        }
-    }
-
-
-    /**
-     * This method is used to hide a keyboard after a user has
-     * finished typing the url.
-     */
-    public void hideKeyboard(Activity activity,
-                             IBinder windowToken) {
-        InputMethodManager mgr =
-                (InputMethodManager) activity.getSystemService
-                        (Context.INPUT_METHOD_SERVICE);
-        mgr.hideSoftInputFromWindow(windowToken,
-                0);
-    }
+ 
+     public void downloadImage(View view) {
+         try {
+             hideKeyboard(this,
+                     userInput.getWindowToken());
+             isDownload = true;
+            Uri  urlUser = getUrl();
+             downloadImageFragment.startBackgroundTask(urlUser);
+ 
+         } catch (Exception e) {
+             e.printStackTrace();
+         }
+     }
+ 
+     public void scaleToGrayImage(View view) {
+         try {
+             hideKeyboard(this,
+                     userInput.getWindowToken());
+             isFilter = true;
+            Uri  urlUser = getUrl();
+             downloadImageFragment.startFilterBackgroundTask(urlUser);
+ 
+         } catch (Exception e) {
+             e.printStackTrace();
+         }
+     }
+ 
+ 
+     /**
+      * Get the URL to download based on user input.
+      */
+     protected Uri getUrl() {
+         Uri url = Uri.parse(userInput.getText().toString());
+         String uri = url.toString();
+         if (uri == null || uri.equals(""))
+             url = mDefaultUrl;
+         if (URLUtil.isValidUrl(uri) || uri.isEmpty()) {
+             return url;
+         } else {
+             Toast.makeText(this,
+                     "Invalid URL ",
+                     Toast.LENGTH_SHORT).show();
+             return url;
+         }
+     }
+ 
+ 
+     /**
+      * This method is used to hide a keyboard after a user has
+      * finished typing the url.
+      */
+     public void hideKeyboard(Activity activity,
+                              IBinder windowToken) {
+         InputMethodManager mgr =
+                 (InputMethodManager) activity.getSystemService
+                         (Context.INPUT_METHOD_SERVICE);
+         mgr.hideSoftInputFromWindow(windowToken,
+                 0);
+     }
 
     /**
-     * Set o methods to update progressbar with downloaded image
-     * @param progress
-     */
-    public void updateProgressBar(int progress) {
-        progressBar.setProgress(progress);
+                         * update progressbar with d(ownloaded image
+                         * @param progres)
+                     || (downloadImaeAsyncTask != null) s
+                        essBar.setProgress(progre ss);
-
-    }
-
+               
+                   }
+                   
-    public void progressBarStartDownloading() {
-        if ((downloadImageFragment.downloadImageAsyncTask != null)
-                || (downloadImageFragment.filterImageAsyncTask != null)  ) {
-            if (progressBar.getVisibility() != View.VISIBLE
-                    && progressBar.getProgress() != progressBar.getMax()) {
-                progressBar.setVisibility(View.VISIBLE);
+               //    || (downloadImageFragment.filterImageAsyncTask != null)
+               
+                   public voitDownloadiAsyncTask != null ) {
+                           if (progressBar(.getVisibility() != View.VISIBLE
+                          
+                     || (downloadImageFragment.filterImageAsyncTask != null)) {        && progressBar.ge(Progress() != progressBar.getMax()) {
+          )                    progressBar.setVisibility(View.VISIBLE);
-            }
-        }
-    }
-
+                           }
+                       }
+                   }
+               
+               //    || (downloadImageFragment.filterImageAsyncTask != null))
+               
-    public void progressBarFinishAndHide() {
+                   public void progressBarFinishAndHide() {
-        if ((downloadImageFragment.downloadImageAsyncTask != null )
-                || (downloadImageFragment.filterImageAsyncTask != null)) {
+                       if (downloadImageFragment.downloadImageAsyncTask != null) {
-                     if (progressBar.getVisibility() == View.VISIBLE) {
+                                    if (progressBar.getVisibility() == View.VISIBLE ){
-                         progressBar.setVisibility(View.GONE);
+                                        progressBar.setVisibility(View.GONE);
-                         progressBar.setProgress(0);
-                     }
-                 }
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        super.onConfigurationChanged(newConfig);
-        if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {
-            MainActivity.this.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-            setContentView(R.layout.activity_main);
-            Log.d(TAG, "portrait");
-        } else if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {
-            MainActivity.this.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-            setContentView(R.layout.activity_main);
-            Log.d(TAG, "landscape");
-        }
-    }
-
-    public void setBitmap(Bitmap bitmap) {
-        imageView.setImageBitmap(bitmap);
-    }
-}
+                                    }
+                                }
+                   }
+               
+                   @Override
+                   public void onConfigurationChanged(Configuration newConfig) {
+                       super.onConfigurationChanged(newConfig);
+                       if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {
+                           MainActivity.this.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+                           setContentView(R.layout.activity_main);
+                           Log.d(TAG, "portrait");
+                       } else if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {
+                           MainActivity.this.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+                           setContentView(R.layout.activity_main);
+                           Log.d(TAG, "landscape");
+                       }
+                   }
+               
+                   public void setBitmap(Bitmap bitmap) {
+                       imageView.setImageBitmap(bitmap);
+                   }
+               }
+               
\ No newline at end of file
